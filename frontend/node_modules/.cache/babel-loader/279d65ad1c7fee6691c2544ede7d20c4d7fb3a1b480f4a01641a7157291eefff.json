{"ast":null,"code":"// Corrigido com barra final\nexport const api = {\n  // Customers\n  getCustomers: () => axios.get(`${BASE_URL}/customers/`).then(res => res.data),\n  addCustomer: data => axios.post(`${BASE_URL}/customers/`, data),\n  updateCustomer: (id, data) => axios.put(`${BASE_URL}/customers/${id}/`, data),\n  deleteCustomer: id => axios.delete(`${BASE_URL}/customers/${id}/`),\n  // Products\n  getProducts: () => axios.get(`${BASE_URL}/products/`).then(res => res.data),\n  addProduct: data => axios.post(`${BASE_URL}/products/`, data),\n  updateProduct: (id, data) => axios.put(`${BASE_URL}/products/${id}/`, data),\n  deleteProduct: id => axios.delete(`${BASE_URL}/products/${id}/`),\n  // Sales\n  getSales: () => axios.get(`${BASE_URL}/sales/`).then(res => res.data),\n  getQuotes: () => axios.get(`${BASE_URL}/sales/quotes/`).then(res => res.data),\n  getTransactionById: id => axios.get(`${BASE_URL}/sales/${id}/`).then(res => res.data),\n  addTransaction: data => axios.post(`${BASE_URL}/sales/`, data),\n  updateTransaction: (id, data) => axios.put(`${BASE_URL}/sales/${id}/`, data),\n  deleteTransaction: id => axios.delete(`${BASE_URL}/sales/${id}/`),\n  convertToSale: (id, paymentDetails) => axios.post(`${BASE_URL}/sales/${id}/convert/`, paymentDetails),\n  // Financial\n  getFinancialEntries: () => axios.get(`${BASE_URL}/financial/`).then(res => res.data),\n  addFinancialEntry: data => axios.post(`${BASE_URL}/financial/`, data),\n  markFinancialEntryAsPaid: id => axios.post(`${BASE_URL}/financial/${id}/pay/`),\n  deleteFinancialEntry: id => axios.delete(`${BASE_URL}/financial/${id}/`),\n  // Reports\n  getReportsData: (start, end) => axios.get(`${BASE_URL}/reports/?start=${start}&end=${end}`).then(res => res.data),\n  setGoals: data => axios.post(`${BASE_URL}/reports/goals/`, data),\n  // Interactions (opcional)\n  addInteraction: data => axios.post(`${BASE_URL}/customers/${data.customerId}/interactions/`, data),\n  getInteractionsByCustomerId: id => axios.get(`${BASE_URL}/customers/${id}/interactions/`).then(res => res.data),\n  // Dashboard\n  getDashboardStats: () => Promise.all([api.getSales(), api.getFinancialEntries(), api.getProducts()]).then(([sales, entries, products]) => {\n    const today = new Date().toISOString().slice(0, 10);\n    const salesToday = sales.filter(s => s.createdAt.startsWith(today));\n    const openQuotes = sales.filter(s => s.status === 'QUOTE');\n    const receivable = entries.filter(e => e.type === 'RECEITA' && e.status !== 'PAGO');\n    const payable = entries.filter(e => e.type === 'DESPESA' && e.status !== 'PAGO');\n    const overduePayable = payable.filter(e => e.status === 'VENCIDO');\n    const lowStock = products.filter(p => p.quantity <= p.minStock);\n    return {\n      salesTodayCount: salesToday.length,\n      salesTodayValue: salesToday.reduce((sum, s) => sum + s.total, 0),\n      openQuotesCount: openQuotes.length,\n      totalReceivable: receivable.reduce((sum, e) => sum + e.amount, 0),\n      totalPayable: payable.reduce((sum, e) => sum + e.amount, 0),\n      overduePayableCount: overduePayable.length,\n      lowStockProductsCount: lowStock.length,\n      recentSales: sales.slice(0, 5)\n    };\n  })\n};","map":{"version":3,"names":["api","getCustomers","axios","get","BASE_URL","then","res","data","addCustomer","post","updateCustomer","id","put","deleteCustomer","delete","getProducts","addProduct","updateProduct","deleteProduct","getSales","getQuotes","getTransactionById","addTransaction","updateTransaction","deleteTransaction","convertToSale","paymentDetails","getFinancialEntries","addFinancialEntry","markFinancialEntryAsPaid","deleteFinancialEntry","getReportsData","start","end","setGoals","addInteraction","customerId","getInteractionsByCustomerId","getDashboardStats","Promise","all","sales","entries","products","today","Date","toISOString","slice","salesToday","filter","s","createdAt","startsWith","openQuotes","status","receivable","e","type","payable","overduePayable","lowStock","p","quantity","minStock","salesTodayCount","length","salesTodayValue","reduce","sum","total","openQuotesCount","totalReceivable","amount","totalPayable","overduePayableCount","lowStockProductsCount","recentSales"],"sources":["C:/Users/Fernando/Desktop/Easydata360/easyStock360/frontend/src/api/api.js"],"sourcesContent":["// Corrigido com barra final\r\nexport const api = {\r\n  // Customers\r\n  getCustomers: () => axios.get(`${BASE_URL}/customers/`).then(res => res.data),\r\n  addCustomer: (data) => axios.post(`${BASE_URL}/customers/`, data),\r\n  updateCustomer: (id, data) => axios.put(`${BASE_URL}/customers/${id}/`, data),\r\n  deleteCustomer: (id) => axios.delete(`${BASE_URL}/customers/${id}/`),\r\n\r\n  // Products\r\n  getProducts: () => axios.get(`${BASE_URL}/products/`).then(res => res.data),\r\n  addProduct: (data) => axios.post(`${BASE_URL}/products/`, data),\r\n  updateProduct: (id, data) => axios.put(`${BASE_URL}/products/${id}/`, data),\r\n  deleteProduct: (id) => axios.delete(`${BASE_URL}/products/${id}/`),\r\n\r\n  // Sales\r\n  getSales: () => axios.get(`${BASE_URL}/sales/`).then(res => res.data),\r\n  getQuotes: () => axios.get(`${BASE_URL}/sales/quotes/`).then(res => res.data),\r\n  getTransactionById: (id) => axios.get(`${BASE_URL}/sales/${id}/`).then(res => res.data),\r\n  addTransaction: (data) => axios.post(`${BASE_URL}/sales/`, data),\r\n  updateTransaction: (id, data) => axios.put(`${BASE_URL}/sales/${id}/`, data),\r\n  deleteTransaction: (id) => axios.delete(`${BASE_URL}/sales/${id}/`),\r\n  convertToSale: (id, paymentDetails) => axios.post(`${BASE_URL}/sales/${id}/convert/`, paymentDetails),\r\n\r\n  // Financial\r\n  getFinancialEntries: () => axios.get(`${BASE_URL}/financial/`).then(res => res.data),\r\n  addFinancialEntry: (data) => axios.post(`${BASE_URL}/financial/`, data),\r\n  markFinancialEntryAsPaid: (id) => axios.post(`${BASE_URL}/financial/${id}/pay/`),\r\n  deleteFinancialEntry: (id) => axios.delete(`${BASE_URL}/financial/${id}/`),\r\n\r\n  // Reports\r\n  getReportsData: (start, end) =>\r\n    axios.get(`${BASE_URL}/reports/?start=${start}&end=${end}`).then(res => res.data),\r\n  setGoals: (data) => axios.post(`${BASE_URL}/reports/goals/`, data),\r\n\r\n  // Interactions (opcional)\r\n  addInteraction: (data) => axios.post(`${BASE_URL}/customers/${data.customerId}/interactions/`, data),\r\n  getInteractionsByCustomerId: (id) => axios.get(`${BASE_URL}/customers/${id}/interactions/`).then(res => res.data),\r\n\r\n  // Dashboard\r\n  getDashboardStats: () =>\r\n    Promise.all([\r\n      api.getSales(),\r\n      api.getFinancialEntries(),\r\n      api.getProducts()\r\n    ]).then(([sales, entries, products]) => {\r\n      const today = new Date().toISOString().slice(0, 10);\r\n      const salesToday = sales.filter(s => s.createdAt.startsWith(today));\r\n      const openQuotes = sales.filter(s => s.status === 'QUOTE');\r\n\r\n      const receivable = entries.filter(e => e.type === 'RECEITA' && e.status !== 'PAGO');\r\n      const payable = entries.filter(e => e.type === 'DESPESA' && e.status !== 'PAGO');\r\n      const overduePayable = payable.filter(e => e.status === 'VENCIDO');\r\n\r\n      const lowStock = products.filter(p => p.quantity <= p.minStock);\r\n\r\n      return {\r\n        salesTodayCount: salesToday.length,\r\n        salesTodayValue: salesToday.reduce((sum, s) => sum + s.total, 0),\r\n        openQuotesCount: openQuotes.length,\r\n        totalReceivable: receivable.reduce((sum, e) => sum + e.amount, 0),\r\n        totalPayable: payable.reduce((sum, e) => sum + e.amount, 0),\r\n        overduePayableCount: overduePayable.length,\r\n        lowStockProductsCount: lowStock.length,\r\n        recentSales: sales.slice(0, 5)\r\n      };\r\n    })\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}